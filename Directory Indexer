import tkinter as tk
from tkinter import filedialog, messagebox
import os

def select_directory(title="Select Directory"):
    """
    Open a dialog to select a directory.
    :param title: The title of the directory selection dialog.
    :return: Path to the selected directory.
    """
    selected_directory = filedialog.askdirectory(title=title)
    return selected_directory

def write_directory_contents(directory, file, indent=0):
    """
    Write the contents of the directory to a file, recursively listing all files and directories.
    :param directory: The directory to list.
    :param file: The file object to write to.
    :param indent: The indentation level for subdirectories.
    """
    for entry in os.listdir(directory):
        entry_path = os.path.join(directory, entry)
        file.write('  ' * indent + entry + '\n')
        if os.path.isdir(entry_path):
            write_directory_contents(entry_path, file, indent + 1)

def create_flat_index_file(directory, output_directory):
    """
    Create an index file with a flat listing of the directory contents.
    :param directory: The directory to index.
    :param output_directory: The directory where the index file will be saved.
    """
    index_file_path = os.path.join(output_directory, 'directory_index.txt')
    with open(index_file_path, 'w', encoding='utf-8') as index_file:
        write_directory_contents(directory, index_file)
    return index_file_path

def generate_directory_tree(path, prefix=""):
    """
    Recursively generate a directory tree structure as a string.
    :param path: Root path of the directory to generate the tree for.
    :param prefix: Prefix used for formatting the tree structure.
    :return: A string representing the directory tree.
    """
    tree = ""
    contents = os.listdir(path)
    contents = sorted(contents, key=lambda x: os.path.isfile(os.path.join(path, x)))

    for index, name in enumerate(contents):
        full_path = os.path.join(path, name)
        connector = "├── " if index < len(contents) - 1 else "└── "
        tree += f"{prefix}{connector}{name}\n"

        if os.path.isdir(full_path):
            tree += generate_directory_tree(full_path, prefix + ("│   " if index < len(contents) - 1 else "    "))
    
    return tree

def create_tree_file(directory, output_directory):
    """
    Create a text file with the hierarchical directory tree structure.
    :param directory: The directory to index.
    :param output_directory: The directory where the tree file will be saved.
    """
    tree_file_path = os.path.join(output_directory, 'generated_project_directory_structure.txt')
    directory_tree = generate_directory_tree(directory)

    with open(tree_file_path, 'w', encoding='utf-8') as tree_file:
        tree_file.write(directory_tree)
    return tree_file_path

class DirectoryIndexerApp:
    def __init__(self, root):
        self.root = root
        root.title("Directory Indexer")

        self.input_directory = None
        self.output_directory = None

        # GUI Elements
        self.input_button = tk.Button(root, text="Select Input Directory", command=self.set_input_directory)
        self.input_button.pack(pady=10)

        self.output_button = tk.Button(root, text="Select Output Directory", command=self.set_output_directory)
        self.output_button.pack(pady=10)

        self.format_var = tk.StringVar(value="tree")

        self.tree_radio = tk.Radiobutton(root, text="Tree Format", variable=self.format_var, value="tree")
        self.tree_radio.pack()

        self.flat_radio = tk.Radiobutton(root, text="Flat Format", variable=self.format_var, value="flat")
        self.flat_radio.pack()

        self.both_radio = tk.Radiobutton(root, text="Both Formats", variable=self.format_var, value="both")
        self.both_radio.pack()

        self.generate_button = tk.Button(root, text="Generate Index", command=self.generate_index)
        self.generate_button.pack(pady=20)

    def set_input_directory(self):
        self.input_directory = select_directory("Select Input Directory")
        if self.input_directory:
            messagebox.showinfo("Input Directory Selected", f"Input Directory: {self.input_directory}")

    def set_output_directory(self):
        self.output_directory = select_directory("Select Output Directory")
        if self.output_directory:
            messagebox.showinfo("Output Directory Selected", f"Output Directory: {self.output_directory}")

    def generate_index(self):
        if not self.input_directory or not self.output_directory:
            messagebox.showwarning("Missing Directory", "Please select both input and output directories.")
            return

        selected_format = self.format_var.get()
        files_created = []

        # Generate based on selected format
        if selected_format == "tree" or selected_format == "both":
            tree_file_path = create_tree_file(self.input_directory, self.output_directory)
            files_created.append(tree_file_path)

        if selected_format == "flat" or selected_format == "both":
            flat_file_path = create_flat_index_file(self.input_directory, self.output_directory)
            files_created.append(flat_file_path)

        messagebox.showinfo("Index Generated", f"Files created:\n" + "\n".join(files_created))

def main():
    root = tk.Tk()
    app = DirectoryIndexerApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
